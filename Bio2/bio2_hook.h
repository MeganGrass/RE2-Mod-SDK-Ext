/*
	バイオハザード 2
	Resident Evil 2
	bio2 1.10.exe

	Original: https://github.com/Gemini-Loboto3/RE2-Mod-SDK
	Gemini, Loboto3

	Extended: https://github.com/MeganGrass/RE2-Mod-SDK-Ext
	Megan Grass
*/

#pragma once

#include "..\\framework.h"
#include "global.h"

// Executable
#define EXE_BASE			0x400000
#define EXE_DIFF			EXE_BASE
#define NAKED				__declspec(naked)
#define JUMP(x)				__asm { jmp[mprc.(x)]}
#define ASSIGN(_y, x)		mprc._y = (FARPROC)&pExe[(x) - EXE_BASE]

// Prototype
VOID Bio2_Hook(UCHAR* pExe);

// Data Structures
extern MONITOR* Monitor;
extern STATUS* St;
extern BGMCTR* Bgm;
extern SCENARIO* Sce;
extern MOJIDISP* Moji;
extern GLOBAL* G;
extern MAIN* Main;
extern GAME* Game;

// Function Signatures
VOID Door_model_init(DOOR_WORK* pTmpDwork, ULONG Model_no);
INT AddPrim(VOID* p, UINT page, INT otag, INT add_back);
INT __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, INT nShowCmd);
VOID Config(VOID);
VOID Config_main(VOID);
VOID Config_fade_in_wait(INT param_1);
VOID Config_padd_snd(USHORT param_1, USHORT param_2, INT param_3);
VOID Die_demo(VOID);
VOID Die_demo_move(VOID);
VOID Die_move_wait(VOID);
VOID Die_move_set_cut(MATRIX* param_1);
VOID Die_move_set_cut_usual(VOID);
VOID Die_enemy_set(VOID);
VOID Die_light_set(VOID);
VOID Die_vcut_set(VOID);
VOID Die_move_pause(MATRIX* param_1);
VOID Die_move_main(VOID);
VOID Die_move_out(VOID);
VOID Die_move_end(ULONG param_1);
VOID Die_spiral_move(MATRIX* param_1);
VOID Die_spir_init(VOID);
VOID Die_spir_move(VOID);
VOID Die_spir_move_init(VOID);
VOID Die_spir_move_main(VOID);
VOID Die_spir_move_hold(VOID);
VOID Die_spir_move_erase(VOID);
VOID Die_spir_move_end(VOID);
VOID Die_spr_load(VOID);
VOID Die_snd_trans(VOID);
VOID Door_scheduler_main(VOID);
VOID Door_Trans(VOID);
ULONG Door_model_set(SCE_TASK* pSce);
VOID Door_texture_load(VOID);
LONG SquareRoot12(LONG a);
INT catan(INT a);
LONG ratan2(LONG y, LONG x);
VECTOR* ApplyMatrix(MATRIX* m, SVECTOR* v0, VECTOR* v1);
SVECTOR* ApplyMatrixSV(MATRIX* m, SVECTOR* v0, SVECTOR* v1);
VECTOR* ApplyMatrixLV(MATRIX* m, VECTOR* v0, VECTOR* v1);
USHORT GetClut(INT x, INT y);
USHORT GetTPage(INT tp, INT abr, INT x, INT y);
VOID MatrixNormal(MATRIX* m, MATRIX* n);
MATRIX* MulMatrix0(MATRIX* m0, MATRIX* m1, MATRIX* m2);
MATRIX* MulMatrix(MATRIX* m0, MATRIX* m1);
MATRIX* MulMatrix2(MATRIX* m0, MATRIX* m1);
VOID CompM(MATRIX* m0, MATRIX* m1, MATRIX* m2);
VOID OuterProduct0(VECTOR* V0, VECTOR* V1, VECTOR* V2);
MATRIX* RotMatrix(SVECTOR* r, MATRIX* m);
MATRIX* RotMatrixX(LONG r, MATRIX* m);
MATRIX* RotMatrixY(LONG r, MATRIX* m);
MATRIX* RotMatrixZ(LONG r, MATRIX* m);
MATRIX* ScaleMatrix(MATRIX* m, VECTOR* v);
VOID SetRotMatrix(MATRIX* m);
VOID SetLightMatrix(MATRIX* m);
VOID SetColorMatrix(MATRIX* m);
VOID SetTransMatrix(MATRIX* m);
MATRIX* TransposeMatrix(MATRIX* m0, MATRIX* m1);
LONG VectorNormal(VECTOR* V0, VECTOR* V1);
VOID SetGeomScreen(LONG h);
INT rsin(INT a);
INT rcos(INT a);
LONG SquareRoot0(LONG a);
ENEMY_WORK* Set_enemy_work(UCHAR Id);
VOID Em_bin_load(ULONG Id);
ULONG Hani_ck(VECTOR* pV, SHORT* pPxzhw);
VOID Add_speedXZ(ENEMY_WORK* pEm, LONG muki);
VOID Add_speedXYZ(ENEMY_WORK* pEm, LONG muki_y, LONG muki_z);
VOID Add_speedXYZsuper(ENEMY_WORK* pEm, LONG muki_y, LONG muki_z);
short Direction_ck(SHORT Hontai_x, SHORT Hontai_z, SHORT Target_x, SHORT Target_z);
VOID Goto00(ENEMY_WORK* pEm, LONG Vec_x, LONG Vec_z, SHORT Add_dir);
LONG Goto00_ck(ENEMY_WORK* pEm, LONG Vec_x, LONG Vec_z, SHORT Add_dir);
VOID Goto01(ENEMY_WORK* pEm, SHORT Dir, SHORT Add_dir);
LONG Goto01_ck(ENEMY_WORK* pEm, SHORT Dir, SHORT Add_dir);
LONG Dir_pos_ck(VECTOR* pV, VECTOR* pP, SHORT Hed_dir, SHORT Hani_dir);
LONG L_pos_ckXZ(VECTOR* pV, VECTOR* pP, ULONG Ll);
LONG L_pos_ckXZM(MATRIX* pM, VECTOR* pP, ULONG Ll, SVECTOR* pSv);
UCHAR Cdir_ck(ENEMY_WORK* pEm, ENEMY_WORK* pT);
UCHAR Cdir_ck2(ENEMY_WORK* pEm, ENEMY_WORK* pT);
ULONG Gacha_ch(VOID);
VOID Set_base_pos(ENEMY_WORK* pEm, ULONG Kan, ULONG Seq, ULONG R_flg);
VOID Null_pos_set(ENEMY_WORK* pEm, ULONG Kan, ULONG Seq, ULONG R_flg);
VOID get_null_pos(SVECTOR* pSv, ULONG R_flg, ULONG Kan, ULONG Seq);
VOID Spd_get(ENEMY_WORK* pEm, ULONG Kan, ULONG Seq, ULONG R_flg);
UCHAR Rnd(VOID);
VOID Em_seq_sound(ENEMY_WORK* pEm);
VOID Foot_set_pl(ENEMY_WORK* pEm, ULONG Mode, ULONG Foot_no);
VOID Kage_work_init(VOID);
VOID Kage_work9_init(VOID);
VOID Kage_work_set(ULONG* pK, ULONG Off, ULONG Half, ULONG Color, VECTOR* pPos);
VOID Kage_work9_set(ULONG* pK, ULONG Off, ULONG Half, ULONG Color, VECTOR* pPos);
VOID MulKage(KAGE_WORK* pKw, SHORT Grand, SHORT Dir_y, ULONG Flg);
VOID Kage_work_sort(VOID);
VOID Kage_work9_sort(VOID);
VOID Kage_work_color_set(ULONG* pK, ULONG Color);
VOID Kage_work9_color_set(ULONG* pK, ULONG Color);
UCHAR Esp_init_C(VOID);
UCHAR Esp_init_R(VOID);
UCHAR Esp_data_set0(UCHAR* ptr8, ULONG* ptr32, ULONG addr, ULONG type);
VOID Esp_data_set1(ULONG* plong, ULONG* ptr);
UCHAR Esp_call(ULONG bit, SHORT dir_y, MATRIX* pmat, SVECTOR* svec);
UCHAR Esp_call3D(ULONG bit, SHORT dir_y, MATRIX* pmat, SVECTOR* svec, SVECTOR* dsv);
UCHAR Esp_call3D2(ULONG bit, ULONG dir_y_id2, MATRIX* pmat, SVECTOR* svec, SVECTOR* dsv);
UCHAR Esp_call2(ULONG bit, ULONG dir_y_id2, MATRIX* pmat, SVECTOR* svec);
UCHAR Esp_call3(ULONG bit, SHORT dir_y, MATRIX* pmat, SVECTOR* svec);
UCHAR Esp_kill(UCHAR id, UCHAR tp, MATRIX* pmat);
UCHAR Esp_kill2(ULONG id2);
VOID Esp_die(VOID);
UCHAR Esp_ctrl(UCHAR id, UCHAR tp, USHORT rtn, MATRIX* pmat);
VOID Esp_move(VOID);
VOID Esp_pos(INT param_1);
VOID Gun_light_reset(VOID);
VOID Joint_trans2(ENEMY_WORK* pEm, PARTS_W* pP_ptr);
VOID ko_joint_trans2(ENEMY_WORK* pEm, PARTS_W* pP_ptr, ULONG be_flg, MATRIX* wm);
VOID ko_joint_trans3(ENEMY_WORK* pEm, PARTS_W* pP_ptr, ULONG be_flg, MATRIX* wm);
ULONG PartsWork_set(ENEMY_WORK* pEm, ULONG work_top);
ULONG PartsWork_link(ENEMY_WORK* pEm, ULONG Packet_top, ULONG* pKan_t_ptr, ULONG Flg);
VOID Init_Parts_work(ENEMY_WORK* pEm);
VOID Parts_down(PARTS_W* pP_ptr, MATRIX* wm);
VOID Parts_bomb(PARTS_W* pP_ptr);
VOID Parts_ryu(PARTS_W* pP_ptr);
VOID HMatrix(MATRIX* pM0, MATRIX* pM1, MATRIX* pM2, ULONG Late);
ULONG Joint_move(ENEMY_WORK* pEm, ULONG Kan_t_ptr, ULONG Seq_t_ptr, ULONG Late_flg);
ULONG J_seq(ULONG Kan_t_ptr, ULONG Seq_t_ptr, ULONG* pSeq_ptr, ULONG Late_flg);
VOID hokan_svec(SVECTOR* sv0, SVECTOR* sv1, SVECTOR* sv2, ULONG late);
ULONG Joint_move_p(JOINT_P* pJp, ULONG Kan_t_ptr, ULONG Seq_t_ptr, ULONG Late_flg);
ULONG Joint_move2(ENEMY_WORK* pEm, ULONG Kan_t_ptr, ULONG Seq_t_ptr, ULONG Late_flg);
ULONG J_seq2(ULONG Kan_t_ptr, ULONG Seq_t_ptr, ULONG* pSeq_ptr, ULONG Late_flg);
VOID Scr_effect(VOID);
VOID Scr_quake(ULONG Amp);
VOID Line_work_init(VOID);
INT main(INT _Argc, CHAR** _Argv, CHAR** _Env);
VOID Init_system(VOID);
VOID Init_main(VOID);
VOID Swap_Cbuff(VOID);
VOID Bg_set_mode(ULONG Mode, ULONG Rgb);
VOID Bg_load(VOID);
VOID Bg_draw(VOID);
VOID Fade_set(USHORT A0, SHORT Add, ULONG Mask, ULONG Pri);
VOID Fade_adjust(ULONG No, ULONG Kido, ULONG Rgb, RECT* Rect);
VOID Fade_off(ULONG No);
ULONG Fade_status(ULONG No);
VOID System_trans(VOID);
VOID Init_global(VOID);
ULONG Cut_check(ULONG Flg);
VOID Cut_change(ULONG Fc);
VCUT* Ccut_search(ULONG Fc);
ULONG Hit_ck_point4(VECTOR* p, VCUT* cp);
ULONG Hit_ck_box(VECTOR* p, BOX* q);
VOID Logo(VOID);
VOID mapModelingData(ULONG* pHead);
VOID MulLMatrix(MATRIX* lwm, MATRIX* klwm, MATRIX* nlm);
ULONG Mirror_model_cp(ENEMY_WORK* pEm, ULONG Mem);
VOID Mizu_trans(OBJ_MODEL_WORK* pOwork, ULONG toumei);
VOID Mizu_div_ck(OBJ_MODEL_WORK* pOwork, ULONG Size_x, ULONG Size_z);
VOID Mizu_div_main(OBJ_MODEL_WORK* pOwork, ULONG Size_x, ULONG Size_z, ENEMY_WORK* pEwork);
LONG Print8(ULONG x, ULONG y, ULONG c, ULONG p, UCHAR* pPtr);
LONG Print14(ULONG x, ULONG y, ULONG c, ULONG p, UCHAR* pPtr);
LONG Print_main(ULONG x, ULONG y, ULONG attr, UCHAR** pSave);
LONG Mess_set(ULONG Pos_xy, USHORT Attr, ULONG Mess_no, ULONG Stop_data);
VOID Moji_trans_main(VOID);
VOID Mess_disp(MOJIDISP* pMoji);
VOID Branch_disp(MOJIDISP* pMoji, BRANCH_TBL* pBtbl, ULONG Flg, ULONG Mode);
UCHAR* name_ptr_set(UCHAR Item_id);
VOID mess_trans(MOJIDISP* pMoji);
VOID Name_disp(LONG Pos_x, LONG Pos_y, ULONG Attr, ULONG Item_id);
VOID Mess_print(ULONG Pos_x, ULONG Pos_y, UCHAR* pMess, ULONG Attr);
VOID moji_trans_main(MOJIDISP* pMoji);
UCHAR* moji_trans_8(UCHAR* pBuff0, ULONG Pos, MOJIDISP* pMoji);
UCHAR* moji_trans_14(UCHAR* pBuff0, ULONG Pos, MOJIDISP* pMoji);
VOID Moji_buff_init(VOID);
VOID Moji_init(VOID);
VOID Moji_mode_init(VOID);
VOID Init_movie_work(ULONG Id);
ULONG Oba_ck_hit(ENEMY_WORK* pEm1, ENEMY_WORK* pEm2);
ULONG Oba_ck_only(VECTOR* pV, ENEMY_WORK* pEm1, ENEMY_WORK* pEm2);
VOID Oba_set_ofs(ENEMY_WORK* pEm, VECTOR* pPos);
VOID Oba_ck_em(ENEMY_WORK* pEm);
VOID Oba_ck_em2(ENEMY_WORK* pEm);
VOID Sca_ck_em(ENEMY_WORK* pEm, ULONG Sc_id);
VOID Om_init(ULONG Om_no, ULONG* pTmd_adr);
VOID Col_chg_init(ULONG Col_wk_no, CC_PARTS_WORK* pCcp);
VOID Tex_chg_init(ULONG Col_wk_no, CC_PARTS_WORK* pCcp);
VOID Tex_ctr(VOID);
VOID Col_chg(CC_PARTS_WORK* pCcp, RECT* pRect, ULONG Ctr);
VOID Tex_chg(CC_PARTS_WORK* pCcp, RECT* pRect, ULONG Ctr);
VOID Om_move(VOID);
VOID Om_trans(VOID);
VOID Om_move_box(OBJ_MODEL_WORK* pOm);
VOID Om_set_fall_dir(OBJ_MODEL_WORK* pOm);
VOID Oma_set_ofs(OBJ_MODEL_WORK* pOm);
ULONG Oma_ck_oba(ENEMY_WORK* pEm, OBJ_MODEL_WORK* pOm, ULONG Flg);
ULONG Oma_ck_om(OBJ_MODEL_WORK* pOm, OBJ_MODEL_WORK* pOm2);
ULONG Oma_ck_front(ENEMY_WORK* pEm, OBJ_MODEL_WORK* pOm);
ULONG Oma_pl_updown_ck(ULONG Id);
ULONG Oma_Spl_updown_ck(ENEMY_WORK* pEm);
ULONG Oma_front_ck(ENEMY_WORK* pEm, OBJ_MODEL_WORK* pOm);
OBJ_MODEL_WORK* Oma_on_check(ENEMY_WORK* pEm);
VOID Oma_pull(ENEMY_WORK* pEm, OBJ_MODEL_WORK* pOm);
VOID Oma_pull_hosei_x(ENEMY_WORK* pEm, AT_DATA* pOat, LONG X2, LONG W);
VOID Oma_pull_hosei_z(ENEMY_WORK* pEm, AT_DATA* pOat, LONG Z2, LONG D);
OBJ_MODEL_WORK* Oma_get_on_om(ENEMY_WORK* pEm, AT_DATA* pEat);
VOID Oma_ob_pull2(ENEMY_WORK* pEm, OBJ_MODEL_WORK* pOm, ULONG Id, ULONG Spd);
ULONG Omd_in_check(VECTOR* pVec, OBJ_MODEL_WORK* pOm, LONG R, ULONG Flg);
ULONG Oma_obj_ck_all(VECTOR* pPos, ENEMY_WORK* pEm);
VOID Pad_set(VOID);
ULONG Pad_get_trg(VOID);
VOID Pad_rep_set(ULONG Mask, USHORT Data);
VOID Computer200(VOID);
VOID Computer613(VOID);
VOID Computer_init(ULONG Cut_no, ULONG Open_flg);
VOID Computer_exit(ULONG Close_flg);
ULONG Keyboard_Input(ULONG Length, ULONG Flg);
VOID Keyboard_set(ULONG Be_flg, ULONG W, ULONG H, ULONG Col);
ULONG Keyboard(VOID);
ULONG Wframe_in_out(VOID);
VOID Wframe_set(ULONG X, ULONG Y, ULONG X2, ULONG Y2);
ULONG Wframe_move(ULONG X, ULONG Y, ULONG W, ULONG H);
ULONG Get_moji_code(UCHAR Moji);
ULONG Cprint(ULONG Speed, UCHAR* pMess, ULONG* Mend);
VOID Console_put(UCHAR Moji);
VOID Console_roll_up(VOID);
VOID Console_clr(VOID);
VOID Console_trans(ULONG Be_flg);
VOID Sprite_Trans(ULONG nPacket);
VOID Set_sp_work(SP_WORK* pSp, SP_WORK* pSw);
VOID Pl_weapon_ch(ENEMY_WORK* pEm);
VOID Plw02_init(ENEMY_WORK* pEm);
VOID Plw09_init(ENEMY_WORK* pEm);
VOID Plw0c_init(ENEMY_WORK* pEm);
VOID Plw0f_init(ENEMY_WORK* pEm);
VOID Plw12_init(ENEMY_WORK* pEm);
VOID Weapon_cls(ENEMY_WORK* pEm);
VOID init_Weapon_at(ENEMY_WORK* pEm, ATTACK_WEAPON_TBL* At_tbl_top);
ULONG Weapon_at_ck(ENEMY_WORK* pEm, ULONG W_no, ATTACK_WEAPON_TBL* At_tbl_top);
LONG Set_MinMax(ATTACK_WEAPON_EM* pAwe, UCHAR Ck_flg, LONG* pMax, LONG* pMin);
ULONG Attack_r_ck0(MODEL_WORK* pOm, MODEL_WORK* pPm, ATTACK_WORK* pAt);
ULONG Attack_r_ck1(VECTOR* pH, SHORT Cdir_y, VECTOR* pT, ATTACK_WORK* pAt);
ULONG Em_ck(ENEMY_WORK* pEm, ULONG LL);
VOID Hand_ck(ENEMY_WORK* pEm, LONG Ck_pos_y, SHORT Type);
VOID Mag_set(ENEMY_WORK* pEm);
VOID Mag_down(ENEMY_WORK* pEm);
VOID G_rot_st(ENEMY_WORK* pEm);
VOID G_rot(ENEMY_WORK* pEm);
VOID Gat_lp_st(ENEMY_WORK* pEm);
VOID Gat_rot(ENEMY_WORK* pEm);
VOID Pl_water(ENEMY_WORK* pEm);
VOID null(VOID);
VOID Set_room(VOID);
VOID Set_stage(VOID);
VOID Replace_rdt(VOID);
VOID Em_init_move(VOID);
UCHAR Root_ck(ENEMY_WORK* pEm, VECTOR* Dest, UCHAR Dest_area, UCHAR Mode);
UCHAR Rnd_area(VOID);
UCHAR Guide_check(SHORT target_x, SHORT target_z);
VOID kara_rootck2(UCHAR hontai_area, UCHAR target_area, SHORT target_x, SHORT target_z);
VOID Sa_dat_set(ENEMY_WORK* pEm, ULONG* pSa);
ULONG Sca_get_area(LONG X, LONG Z, LONG Sx, LONG Sz);
ULONG Sca_ck_hit(VECTOR* pPos, LONG R, ULONG Floor, ULONG Flg);
ULONG Sca_ck_hit_om(OBJ_MODEL_WORK* pOm, ULONG Att, ULONG Flg);
ULONG Sca_hit_box2(ENEMY_WORK* pEm, LONG R, SCA_DATA* pT_xz);
ULONG Sca_hit_box(ENEMY_WORK* pEm, LONG R, SCA_DATA* pScd);
ULONG Sca_hosei_box(ENEMY_WORK* pEm, SVECTOR* pOld, LONG X, LONG Z);
ULONG Sca_hit_naname_a(ENEMY_WORK* pEm, LONG R, SCA_DATA* pT_xz);
ULONG Sca_ck_naname_a(VECTOR* pPos, LONG R, SCA_DATA* pT_xz);
ULONG Sca_hit_naname_b(ENEMY_WORK* pEm, LONG R, SCA_DATA* pT_xz);
ULONG Sca_ck_naname_b(VECTOR* pPos, LONG R, SCA_DATA* pT_xz);
ULONG Sca_hit_naname_c(ENEMY_WORK* pEm, LONG R, SCA_DATA* pT_xz);
ULONG Sca_ck_naname_c(VECTOR* pPos, LONG R, SCA_DATA* pT_xz);
ULONG Sca_hit_naname_d(ENEMY_WORK* pEm, LONG R, SCA_DATA* pT_xz);
ULONG Sca_ck_naname_d(VECTOR* pPos, LONG R, SCA_DATA* pT_xz);
ULONG Sca_hit_hishi(ENEMY_WORK* pEm, LONG R, SCA_DATA* pT_xz);
ULONG Sca_ck_hishi(VECTOR* pPos, LONG R, SCA_DATA* pT_xz);
ULONG Sca_hit_circle(ENEMY_WORK* pEm, LONG R, SCA_DATA* pT_xz);
ULONG Sca_ck_circle(VECTOR* pPos, LONG R, SCA_DATA* pT_xz);
ULONG Sca_hit_koban_x(ENEMY_WORK* pEm, LONG R, SCA_DATA* pT_xz);
ULONG Sca_ck_koban_x(VECTOR* pPos, LONG R, SCA_DATA* pT_xz);
ULONG Sca_hit_koban_z(ENEMY_WORK* pEm, LONG R, SCA_DATA* pT_xz);
ULONG Sca_ck_koban_z(VECTOR* pPos, LONG R, SCA_DATA* pT_xz);
ULONG Sca_hit_slope(ENEMY_WORK* pEm, LONG R, SCA_DATA* pT_xz);
ULONG Sca_hit_stairs(ENEMY_WORK* pEm, LONG R, SCA_DATA* pT_xz);
ULONG Sca_hit_curve(ENEMY_WORK* pEm, LONG R, SCA_DATA* pT_xz);
LONG Sca_get_slope_high(LONG Pos_x, LONG Pos_z, LONG R, SCA_DATA* pT_xz);
LONG Sca_get_stairs_high(VECTOR* pPos, LONG Low_y, LONG High_y, SCA_DATA* pT_xz);
LONG Sca_get_curve_high(VECTOR* pPos, LONG Low_y, LONG High_y, SCA_DATA* pT_xz);
LONG Sca_get_ground(VECTOR* pPos, LONG R, ULONG Att, ULONG Flg);
USHORT Sca_get_dir(VECTOR* pPos, SCA_DATA* pT_xz);
LONG Sca_get_dir_super(VECTOR* pPos, SCA_DATA* pSca_dat, MATRIX* pSuper, ULONG Flg);
USHORT Sca_get_dir_super_tmp(LONG X, LONG Z, LONG Sx, LONG Sz, LONG Sw, LONG Sd);
ULONG Get_axis(MATRIX* pM);
ULONG Get_axis2(MATRIX* pM);
LONG Sca_get_pos(LONG Dir, SCA_DATA* pSca_dat);
VOID Sca_get_pos_super(VECTOR* pPos, SCA_DATA* pSca_dat, MATRIX* pSuper, VECTOR* pVec);
USHORT Sca_get_pos_super_tmp(LONG X, LONG Z, LONG Sx, LONG Sz, LONG Sw, LONG Sd, LONG* pX, LONG* pZ);
ULONG Sca_ck_line(VECTOR* pV1, VECTOR* pV2, ULONG Att, ULONG Flg);
LONG Sca_get_high(SCA_DATA* pSca_dat);
LONG Sca_get_low(SCA_DATA* pSca_dat);
VOID Sce_test_init(VOID);
ULONG Em_kind_search(ULONG Id);
VOID Sce_se_set(VOID);
VOID Sce_rnd_set(VOID);
VOID Sce_model_init(VOID);
VOID Sce_work_clr(VOID);
VOID Sce_work_clr_set(VOID);
VOID Sce_aot_init(VOID);
VOID Event_init(SCE_TASK* pSce, ULONG Evt_no);
VOID Event_exec(ULONG Task_level, ULONG Evt_no);
VOID Sce_scheduler_set(VOID);
VOID Sce_col_chg_init(VOID);
VOID Sce_mirror_init(VOID);
VOID Sce_scheduler(VOID);
VOID Sce_scheduler_main(VOID);
ULONG Nop(SCE_TASK* pSce);
ULONG Evt_end(SCE_TASK* pSce);
ULONG Evt_next(SCE_TASK* pSce);
ULONG Evt_chain(SCE_TASK* pSce);
ULONG Evt_exec(SCE_TASK* pSce);
ULONG Evt_kill(SCE_TASK* pSce);
ULONG Ifel_ck(SCE_TASK* pSce);
ULONG Else_ck(SCE_TASK* pSce);
ULONG Endif(SCE_TASK* pSce);
ULONG Sleep(SCE_TASK* pSce);
ULONG Sleeping(SCE_TASK* pSce);
ULONG Wsleep(SCE_TASK* pSce);
ULONG Wsleeping(SCE_TASK* pSce);
ULONG For(SCE_TASK* pSce);
ULONG For2(SCE_TASK* pSce);
ULONG Next(SCE_TASK* pSce);
ULONG While(SCE_TASK* pSce);
ULONG Ewhile(SCE_TASK* pSce);
ULONG Do(SCE_TASK* pSce);
ULONG Edwhile(SCE_TASK* pSce);
ULONG While_main(SCE_TASK* pSce, UCHAR* pData, UCHAR Ofs);
ULONG Switch(SCE_TASK* pSce);
ULONG Default(SCE_TASK* pSce);
ULONG Eswitch(SCE_TASK* pSce);
ULONG Goto(SCE_TASK* pSce);
ULONG Gosub(SCE_TASK* pSce);
ULONG Return(SCE_TASK* pSce);
ULONG Break(SCE_TASK* pSce);
ULONG Work_copy(SCE_TASK* pSce);
ULONG Rbj_reset(SCE_TASK* pSce);
ULONG Ck(SCE_TASK* pSce);
ULONG Set(SCE_TASK* pSce);
ULONG Cmp(SCE_TASK* pSce);
ULONG Save(SCE_TASK* pSce);
ULONG Copy(SCE_TASK* pSce);
ULONG Calc(SCE_TASK* pSce);
ULONG Calc2(SCE_TASK* pSce);
VOID Calc_branch(ULONG Exp, SHORT* Ans, LONG Num);
ULONG Sce_rnd(SCE_TASK* pSce);
ULONG Cut_chg(SCE_TASK* pSce);
ULONG Cut_old(SCE_TASK* pSce);
VOID Cut_chg_main(ULONG Cut_no);
ULONG Cut_auto(SCE_TASK* pSce);
ULONG Cut_replace(SCE_TASK* pSce);
ULONG Cut_be_set(SCE_TASK* pSce);
ULONG Message_on(SCE_TASK* pSce);
ULONG Aot_set(SCE_TASK* pSce);
ULONG Aot_set_4p(SCE_TASK* pSce);
ULONG Door_aot_set(SCE_TASK* pSce);
ULONG Door_aot_set_4p(SCE_TASK* pSce);
ULONG Item_aot_set(SCE_TASK* pSce);
ULONG Item_aot_set2(SCE_TASK* pSce);
ULONG Item_aot_set_4p(SCE_TASK* pSce);
ULONG Aot_reset(SCE_TASK* pSce);
ULONG Aot_on(SCE_TASK* pSce);
ULONG Obj_model_set(SCE_TASK* pSce);
ULONG Super_set(SCE_TASK* pSce);
ULONG Super_on(SCE_TASK* pSce);
ULONG Super_reset(SCE_TASK* pSce);
ULONG Work_set(SCE_TASK* pSce);
ULONG Parts_set(SCE_TASK* pSce);
ULONG Speed_set(SCE_TASK* pSce);
ULONG Add_speed(SCE_TASK* pSce);
ULONG Add_aspeed(SCE_TASK* pSce);
ULONG Pos_set(SCE_TASK* pSce);
ULONG Dir_set(SCE_TASK* pSce);
ULONG Member_set(SCE_TASK* pSce);
ULONG Member_set2(SCE_TASK* pSce);
VOID Member_set_branch(ENEMY_WORK* pW, ULONG Member, LONG D0);
ULONG Member_copy(SCE_TASK* pSce);
ULONG Member_cmp(SCE_TASK* pSce);
LONG Load_member_branch(ENEMY_WORK* pW, ULONG Member);
ULONG Member_calc(SCE_TASK* pSce);
ULONG Member_calc2(SCE_TASK* pSce);
SHORT* Load_member_addr_branch(ENEMY_WORK* pW, ULONG Member);
ULONG Dir_ck(SCE_TASK* pSce);
ULONG Se_on(SCE_TASK* pSce);
ULONG Sca_id_set(SCE_TASK* pSce);
ULONG Sce_espr_on(SCE_TASK* pSce);
ULONG Sce_espr_on2(SCE_TASK* pSce);
ULONG Sce_espr3d_on(SCE_TASK* pSce);
ULONG Sce_espr3d_on2(SCE_TASK* pSce);
ULONG Sce_espr_kill(SCE_TASK* pSce);
ULONG Sce_espr_kill2(SCE_TASK* pSce);
ULONG Sce_espr_task(SCE_TASK* pSce);
ULONG Sce_espr_control(SCE_TASK* pSce);
MATRIX* Get_matrix(LONG Work_kind, LONG Work_no);
ULONG Plc_motion(SCE_TASK* pSce);
ULONG Plc_dest(SCE_TASK* pSce);
ULONG Plc_gun(SCE_TASK* pSce);
ULONG Plc_neck(SCE_TASK* pSce);
ULONG Plc_ret(SCE_TASK* pSce);
ULONG Plc_stop(SCE_TASK* pSce);
ULONG Plc_flg(SCE_TASK* pSce);
ULONG Plc_rot(SCE_TASK* pSce);
ULONG Plc_cnt(SCE_TASK* pSce);
ULONG Sce_em_set(SCE_TASK* pSce);
ULONG Sce_em_set2(SCE_TASK* pSce);
ULONG Sce_key_ck(SCE_TASK* pSce);
ULONG Sce_trg_ck(SCE_TASK* pSce);
ULONG Sce_bgm_control(SCE_TASK* pSce);
ULONG Sce_bgmtbl_set(SCE_TASK* pSce);
ULONG Sce_fade_set(SCE_TASK* pSce);
ULONG Sce_fade_adjust(SCE_TASK* pSce);
ULONG Xa_on(SCE_TASK* pSce);
ULONG Xa_vol(SCE_TASK* pSce);
ULONG Se_vol(SCE_TASK* pSce);
ULONG Sce_shake_on(SCE_TASK* pSce);
ULONG Sce_line_start(SCE_TASK* pSce);
ULONG Sce_line_main(SCE_TASK* pSce);
ULONG Sce_line_end(SCE_TASK* pSce);
ULONG Mizu_div_set(SCE_TASK* pSce);
ULONG Keep_Item_ck(SCE_TASK* pSce);
ULONG Sce_Item_cmp(SCE_TASK* pSce);
ULONG Sce_Item_lost(SCE_TASK* pSce);
ULONG Sce_Item_lost2(SCE_TASK* pSce);
ULONG Weapon_chg(SCE_TASK* pSce);
ULONG Sce_Item_get(SCE_TASK* pSce);
ULONG Kage_set(SCE_TASK* pSce);
ULONG Light_pos_set(SCE_TASK* pSce);
ULONG Light_kido_set(SCE_TASK* pSce);
ULONG Light_color_set(SCE_TASK* pSce);
ULONG Light_pos_set2(SCE_TASK* pSce);
ULONG Light_kido_set2(SCE_TASK* pSce);
ULONG Light_color_set2(SCE_TASK* pSce);
ULONG Sce_scr_move(SCE_TASK* pSce);
ULONG Flr_set(SCE_TASK* pSce);
ULONG Movie_on(SCE_TASK* pSce);
ULONG Splc_ret(SCE_TASK* pSce);
ULONG Splc_sce(SCE_TASK* pSce);
ULONG Evt_next2(SCE_TASK* pSce);
ULONG Mirror_set(SCE_TASK* pSce);
ULONG Sce_parts_bomb(SCE_TASK* pSce);
ULONG Sce_parts_down(SCE_TASK* pSce);
ULONG Col_chg_set(SCE_TASK* pSce);
ULONG Plc_heal(SCE_TASK* pSce);
ULONG St_map_hint(SCE_TASK* pSce);
ULONG Sce_em_pos_ck(SCE_TASK* pSce);
ULONG Poison_ck(SCE_TASK* pSce);
ULONG Poison_clr(SCE_TASK* pSce);
ULONG Case(SCE_TASK* pSce);
ULONG Vib_fade_set(SCE_TASK* pSce);
ULONG Sce_at_check(ENEMY_WORK* pEm, ULONG attribute, ULONG auto_flg);
ULONG Nothing(VOID* pAot);
ULONG Sce_Door(VOID* pAot);
ULONG Sce_Item(VOID* pAot);
ULONG Sce_Normal(VOID* pAot);
ULONG Sce_Message(VOID* pAot);
ULONG Sce_Event(VOID* pAot);
ULONG Sce_Flg_chg(VOID* pAot);
ULONG Sce_Water(VOID* pAot);
ULONG Sce_Move(VOID* pAot);
ULONG Sce_Save(VOID* pAot);
ULONG Sce_Itembox(VOID* pAot);
ULONG Sce_Damage(VOID* pAot);
ULONG Sce_Status(VOID* pAot);
ULONG Sce_Hikidashi(VOID* pAot);
ULONG Sce_Windows(VOID* pAot);
VOID Sce_at(VOID);
LONG Water_ck(LONG Pos_x, LONG Pos_z);
UCHAR Floor_check(LONG check_x, LONG check_z, ULONG nfloor);
VOID Snd_sys_init(VOID);
VOID Snd_sys_init_sub2(VOID);
VOID Snd_sys_core_set(UCHAR core_type_no, UCHAR sw);
VOID Snd_sys_arms_set(UCHAR arms_type_no);
VOID Snd_sys_room_set(VOID);
VOID Snd_sys_enem_set(VOID);
VOID Snd_bgm_set(VOID);
VOID Snd_bgm_ck(VOID);
VOID Snd_bgm_play_ck(VOID);
char Snd_bgm_main(VOID);
char Snd_bgm_sub(VOID);
VOID Snd_bgm_fade_ON(UCHAR time, UCHAR mode);
VOID Snd_bgm_ctr(ULONG code);
VOID Snd_bgm_tbl_set(ULONG code);
VOID Snd_se_stad(ULONG bits, VECTOR* pVec);
VOID Snd_se_enem(UCHAR SENo, ENEMY_WORK* pEm);
VOID Snd_se_walk(USHORT no, USHORT lr, ENEMY_WORK* pEm);
VOID Snd_se_call(VOID);
UCHAR Snd_se_pri_ck(UCHAR Sv_ch, UCHAR Sv_pri);
VOID Snd_se_3D(VECTOR* pVec);
short Snd_se_dir_ck(LONG B_x, LONG B_z, LONG T_x, LONG T_z);
VOID Xa_play(ULONG mode, ULONG no);
VOID Xa_error(VOID);
VOID Xa_control_stop(VOID);
VOID Xa_control_init(VOID);
VOID Xa_control_play(VOID);
VOID Xa_control_end(VOID);
VOID Xa_control(VOID);
ULONG Spl_soba_pos_set(SHORT ll, SHORT dir, SHORT dir2, SVECTOR* pPos);
VOID Spl_enemy_ck(ENEMY_WORK* pEm);
ULONG Spl_em_pos_ck(ENEMY_WORK* pEm, ULONG Lim);
ULONG Spl_em_cdir_ck(ENEMY_WORK* pEm);
ULONG Spl_pllock_get(ENEMY_WORK* pEm, ENEMY_WORK* pYo);
ULONG Spl_life_down(ENEMY_WORK* pEm, LONG Down_life, ULONG Mode);
VOID model_disp(MODEL_WORK* pOm, ULONG type, ULONG no);
VOID Set_iwork(ULONG no, ULONG id, ULONG num, ULONG size);
VOID Set_iwork_num(ULONG no, ULONG num);
ULONG Check_pl_life(VOID);
ULONG Check_item_space(ULONG id);
ULONG Check_item_mix(VOID);
LONG Search_item(ULONG type);
LONG Search_item_id(ULONG id);
VOID Sort_item(VOID);
VOID Shift_item(ULONG type);
VOID Set_item(ULONG id, ULONG num, ULONG* adr);
VOID Tama_reload(VOID);
VOID Check_cursol_distance(ULONG type);
VOID Memcpy(VOID* p, VOID* q, LONG r);
VOID Memclr(VOID* p, LONG r);
ULONG Mapping_tmd(ULONG Mode, ULONG* pTmd_adr, ULONG Ctp, ULONG Ccl);
VOID Set_view(LONG* pVp, LONG* pVr);
VOID Set_light(VECTOR* pV);
VOID Set_Light_data(ULONG No, VECTOR* pLig, UCHAR* pRgb);
VOID Flg_on(ULONG* p, ULONG x);
VOID Flg_off(ULONG* p, ULONG x);
ULONG Flg_ck(ULONG* p, ULONG x);
VOID Rot_vector(SHORT dir, SVECTOR* p, SVECTOR* q);
VOID Rot_vector_super(SHORT dir, MATRIX* pM, SVECTOR* p, SVECTOR* q);
VOID Rot_add_matrix(LONG* pPos, SHORT* pDir, MATRIX* pM, SVECTOR* Add_dir);
VOID Set_front_pos(ENEMY_WORK* pEm);
VOID InitGeom_func(VOID);
VOID Init_scheduler(VOID);
VOID Scheduler(VOID);
VOID Task_execute(ULONG Level, VOID* pFuncall);
VOID Task_sleep(ULONG Sleep_counter);
VOID Task_exit(VOID);
VOID Task_kill(ULONG Level);
VOID Task_chain(VOID* pFuncall);
VOID Task_suspend(ULONG Level);
VOID Task_signal(ULONG Level);
ULONG Task_status(ULONG Level);
